package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"net/http"

	"github.com/Mark-Otte/EMS/graph/model"
	"github.com/dgrijalva/jwt-go"
)

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context,
	firstName string, lastName string, username string,
	password string, email string, dob string, departmentID int,
	position string) (*model.Employee, error) {
	// Check if the request has a valid JWT token in the Authorization header
	tokenString := r.req.Header.Get("Authorization")
	_, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		return []byte("your-secret-key"), nil
	})
	if err != nil {
		http.Error(r.writ, "Invalid or missing JWT token", http.StatusUnauthorized)
		return nil, nil
	}
	panic(fmt.Errorf("not implemented: CreateEmployee - createEmployee"))
}

// GetEmployeeByID is the resolver for the getEmployeeByID field.
func (r *queryResolver) GetEmployeeByID(ctx context.Context, id int) (*model.Employee, error) {
	// Check if the request has a valid JWT token in the Authorization header
	tokenString := r.req.Header.Get("Authorization")
	_, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		return []byte("your-secret-key"), nil
	})
	if err != nil {
		http.Error(r.writ, "Invalid or missing JWT token", http.StatusUnauthorized)
		return nil, nil
	}
	panic(fmt.Errorf("not implemented: GetEmployeeByID - getEmployeeByID"))
}

// GetAllEmployees is the resolver for the getAllEmployees field.
func (r *queryResolver) GetAllEmployees(ctx context.Context) ([]*model.Employee, error) {
	// Check if the request has a valid JWT token in the Authorization header
	tokenString := r.req.Header.Get("Authorization")
	_, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		return []byte("your-secret-key"), nil
	})
	if err != nil {
		http.Error(r.writ, "Invalid or missing JWT token", http.StatusUnauthorized)
		return nil, nil
	}
	panic(fmt.Errorf("not implemented: GetAllEmployees - getAllEmployees"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
